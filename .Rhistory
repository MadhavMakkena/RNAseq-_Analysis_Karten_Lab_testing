#Subset the extreme values (if necessary)
if(is.null(extremes)){
extremes<-subset(res, abs(log2FoldChange)>maxvalx)
for(i in 1:nrow(extremes)){
if(extremes$log2FoldChange[i] < 0){
extremes$log2FoldChange[i]<-maxvalx*-1
} else {
extremes$log2FoldChange[i]<-maxvalx
}
}
}
}
if(!is.null(pval)){
#Set sig to the p-value threshold
sig<--log(pval,10)
#Separate out padj = 0
zeroes<-subset(res, pvalue == 0)
#Get the number of NA values for P values
pNA<-length(which(is.na(res$pvalue)==TRUE))
#Remove padj=0 from res
res<-subset(res, pvalue > 0)
#Subset out the down/up regulated genes and no change genes
down<-subset(res,pvalue<pval & log2FoldChange < -FC)
up<-subset(res,pvalue<pval & log2FoldChange > FC)
nc<-subset(res,pvalue>pval | abs(log2FoldChange) < FC)
#Subset the extreme values (if necessary)
if(is.null(extremes)){
extremes<-subset(res, abs(log2FoldChange)>maxvalx)
for(i in 1:nrow(extremes)){
if(extremes$log2FoldChange[i] < 0){
extremes$log2FoldChange[i]<-maxvalx*-1
} else {
extremes$log2FoldChange[i]<-maxvalx
}
}
}
}
#Set a column for point sizes:
nc$cex<-rep(0.6, nrow(nc))
up$cex<-rep(0.6, nrow(up))
down$cex<-rep(0.6, nrow(down))
cex_scale<-(diff(range(log10(res$baseMean[!is.na(res$baseMean)]))))
if(isTRUE(expScale)){
nc$cex<- log10(nc$baseMean)/cex_scale
up$cex<- log10(up$baseMean)/cex_scale
down$cex<- log10(down$baseMean)/cex_scale
}
if(is.null(upcol)){
upcol <- rgb(1,0,0,0.75)
}
if(is.null(dncol)){
dncol <- rgb(0,0,1,0.75)
}
#Plot the points, start with nc (black), then down (blue), and up (red)
plot(nc$log2FoldChange,-log(nc$pvalue,10), pch=16, cex=nc$cex, main=title, xlab=expression(log[2](FoldChange)), ylab=expression(-log[10](pvalue)),
ylim=c(0, max(c(10,max(na.omit(-log(res$pvalue,10)))))), xlim=c(-maxvalx, maxvalx), col=rgb(0,0,0,0.5))
points(down$log2FoldChange,-log(down$pvalue,10), pch=16, cex=down$cex, col=dncol)
points(up$log2FoldChange, -log(up$pvalue,10),pch=16, cex=up$cex, col=upcol)
#Add in the extreme points (if necessary)
if(length(extremes) >1){
#Make sure if they are DEGs, they're coloured properly:
tmp<-extremes[which(rownames(extremes)%in% rownames(nc)),]
points(tmp$log2FoldChange, -log(tmp$pvalue,10), pch=18, cex=1, col=rgb(0,0,0,0.5))
tmp<-extremes[which(rownames(extremes) %in% rownames(down)),]
points(tmp$log2FoldChange, -log(tmp$pvalue,10), pch=18, cex=1, col=dncol)
tmp<-extremes[which(rownames(extremes) %in% rownames(up)),]
points(tmp$log2FoldChange, -log(tmp$pvalue,10), pch=18, cex=1, col=upcol)
#Check to see if any extremems need to be labelled or coloured:
if(!is.null(lab)){
labpoints<-extremes[lab,]
text(labpoints$log2FoldChange, -log(labpoints$pvalue,10), labels=rownames(labpoints), cex=0.75, font=2,
pos=4, col="orange")
}
if(!is.null(col)){
colpoints<-extremes[col,]
points(colpoints$log2FoldChange, -log(colpoints$pvalue,10), pch=18, cex=1, col="black")
}
}
#Plot dotted lines for the thresholds
if(FC>0){
abline(v=c(-(FC),FC),lty=c(2,2))
}
abline(h=c(sig),lty=c(2))
if(!is.null(col)){
colpoints<-res[col,]
colpoints$cex<-rep(0.6, nrow(colpoints))
if(isTRUE(expScale)){
colpoints$cex<- log10(colpoints$baseMean)/cex_scale
}
points(colpoints$log2FoldChange, -log(colpoints$pvalue,10), pch=22, cex=colpoints$cex, col="red")
}
#
if(FC>0){
abline(v=c(-(FC),FC),lty=c(2,2))
}
abline(h=c(sig),lty=c(2))
if(!is.null(cola)){
colpointsa<-res[cola,]
colpointsa$cex<-rep(0.6, nrow(colpointsa))
if(isTRUE(expScale)){
colpointsa$cex<- log10(colpointsa$baseMean)/cex_scale
}
points(colpointsa$log2FoldChange, -log(colpointsa$pvalue,10), pch=23, cex=colpoints$cex, col="green")
}
#
#Now calculate number of DEGs (including padj=0)
numdown<-dim(down)[1]+dim(subset(zeroes, log2FoldChange < -FC))[1]
numup<-dim(up)[1]+dim(subset(zeroes, log2FoldChange > FC))[1]
numnc<-dim(nc)[1]+dim(subset(zeroes, abs(log2FoldChange)<FC))[1]+pNA
#Get the DEGs
DEdown <- rownames(down)
DEup <- rownames(up)
#Print the numbers of genes on the plot
if(isTRUE(showNum)){
text(-(maxvalx/2), max(c(10,max(na.omit(-log(res$pvalue,10))))), numdown, col = dncol)
text((maxvalx/2), max(c(10,max(na.omit(-log(res$pvalue,10))))), numup, col= upcol)
text(-maxvalx, 0, numnc, col="black", adj=c(0,0))
text(maxvalx, 0, paste("Total:",(dim(res)[1])+dim(zeroes)[1]+pNA), col="purple", pos=2)
}
#Now add in the gene labels if they were specified
if(!is.null(lab)){
if(lab[1]=="labDEG"){
lab=c(DEdown,DEup)
}
labpoints<-res[lab,]
text(labpoints$log2FoldChange, -log(labpoints$pvalue,10), labels=rownames(labpoints), cex=0.75, font=2,
pos=4, col="black")
}
#Return a list of the numbers of genes (down, then up, then no change)
if(isFALSE(returnDEG)){
return(list(Down=numdown,Up=numup,No_Change=numnc))
}
if(isTRUE(returnDEG)){
return(list(Down=DEdown, Up=DEup))
}
}
#
rm(Volcano_plot_2colour())
View(Volcano_plot_2colour)
#
devtools::update_packages("BinfTools")
#
library("BinfTools")
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=test3, # in red list of genes to colour (NULL to not colour any)
cola=NULL, # in green list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=test3, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist_up <- c(list(testlist_up=testlist$Up))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=test3, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=test3, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=test3, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=NULL, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c(ANXA6)
test <- c("ANXA6")
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c("ANXA6", "PSMB2", "NPC1", "NPC2", "STARD3")
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
#histogram of counts 3x2 plot
par(mfrow=c(3,2))
plotCounts(DESeq, gene="PSMB2", intgroup="condition", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="PSMB2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC1", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD3", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD4", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="VDAC", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="VDAC", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STAR", intgroup="sample_type", transform=F, ylim=c(0, 4000))
#histogram of counts 3x2 plot
par(mfrow=c(2,3))
plotCounts(DESeq, gene="PSMB2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC1", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD3", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD4", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STAR", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="PSMB2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC1", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD3", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD4", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="ANXA6", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="ANXA6", intgroup="sample_type", transform=F)
plotCounts(DESeq, gene="PSMB2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC1", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="NPC2", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD3", intgroup="sample_type", transform=F, ylim=c(0, 4000))
plotCounts(DESeq, gene="STARD4", intgroup="sample_type", transform=F, ylim=c(0, 4000))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
par(mfrow=c(1,1))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c("ANXA6")
par(mfrow=c(1,1))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c("ANXA5")
par(mfrow=c(1,1))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c("AHNAK")
par(mfrow=c(1,1))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c("ANXA2")
par(mfrow=c(1,1))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
test <- c("ANXA5")
par(mfrow=c(1,1))
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.1), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=1, #adjusted p-value threshold for DEGs
FC=log2(1), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
testlist <- volcanoPlot(res=result, #Results object
title="Fibroblast vs. SH-SY5Y [Endo_const; p=0.005; FC=1.5]",
pval=0.005, #adjusted p-value threshold for DEGs
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=test, #list of genes to label (NULL to not label any)
col=test, # in red list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol="lightblue3", #Colour value for upregulated genes, NULL will be red
dncol="rosybrown3") #Colour value for downregulated genes, NULL will be blue)
statVolcano<-function(result){
up<-subset(res, padj<0.005 & log2FoldChange > 1)
down<-subset(res, padj<0.005 & log2FoldChange < -1)
plot(abs(res$stat)~res$log2FoldChange, pch=16, cex=0.6, col="black", xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="DEGs")
points(abs(up$stat)~up$log2FoldChange, pch=16, cex=0.6, col="red")
points(abs(down$stat)~down$log2FoldChange, pch=16, cex=0.6, col="blue")
abline(h=min(abs(subset(res, padj<0.05)$stat)), v=c(1,-1), lty=2)
}
statVolcano(result)
down<-subset(res, padj<0.005 & log2FoldChange < -1.5)
statVolcano(result)
abline(h=min(abs(subset(res, padj<0.05)$stat)), v=c(1.5,-1.5), lty=2)
statVolcano(result)
abline(h=min(abs(subset(res, padj<0.05)$stat)), v=c(1.5,-1.5), lty=2)
statVolcano(result)
View(Volcano_plot_2c)
View(result)
abline(h=min(abs(subset(res, pvalue<0.05)$stat)), v=c(1.5,-1.5), lty=2)
statVolcano<-function(result){
up<-subset(res, pvalue<0.005 & log2FoldChange > 1.5)
down<-subset(res, pvalue<0.005 & log2FoldChange < -1.5)
plot(abs(res$stat)~res$log2FoldChange, pch=16, cex=0.6, col="black", xlab="Log2FoldChange", ylab="Absolute Wald Statistic", main="DEGs")
points(abs(up$stat)~up$log2FoldChange, pch=16, cex=0.6, col="red")
points(abs(down$stat)~down$log2FoldChange, pch=16, cex=0.6, col="blue")
abline(h=min(abs(subset(res, pvalue<0.05)$stat)), v=c(1.5,-1.5), lty=2)
}
statVolcano(result)
MA_Plot(res=result,
title="KO vs WT",
p=0.05,
pval=NULL,
FC=log2(1.5),
lab=genes,
col=genes,
fclim=NULL, #Same as volcano plot, but will act on y-axis, not x
showNum=T,
returnDEG=F,
sigScale=F, #Scale point size to significance?
upcol=NULL,
dncol=NULL)
test <- c("ANXA6")
MA_Plot(res=result,
title="KO vs WT",
p=0.05,
pval=NULL,
FC=log2(1.5),
lab=test,
col=test,
fclim=NULL, #Same as volcano plot, but will act on y-axis, not x
showNum=T,
returnDEG=F,
sigScale=F, #Scale point size to significance?
upcol=NULL,
dncol=NULL)
test <- c("NPC1")
test <- c("NPC1", "ANXA6")
MA_Plot(res=result,
title="KO vs WT",
p=0.05,
pval=NULL,
FC=log2(1.5),
lab=test,
col=test,
fclim=NULL, #Same as volcano plot, but will act on y-axis, not x
showNum=T,
returnDEG=F,
sigScale=F, #Scale point size to significance?
upcol=NULL,
dncol=NULL)
View(result)
