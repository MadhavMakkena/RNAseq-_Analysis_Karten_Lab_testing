#checking if the sample names in sample data match the count data
all (rownames(sample_data) %in% colnames(count_data))
all (rownames(sample_data) == colnames(count_data))
#cleaning up count_data to remove genes with 0 counts in all samples
count_data<- count_data[rowSums(count_data_clean) !=0, ]
#cleaning up count_data to remove genes with 0 counts in all samples
count_data<- count_data[rowSums(count_data) !=0, ]
#DESeq analysis
library(DESeq2)
#storing the input values from count_data_clean
DESeq_input <- DESeqDataSetFromMatrix(countData = count_data, colData = sample_data, design = ~ condition)
#Keeping all the genes
exp_100 <-estimateSizeFactors(DESeq_input)
exp_100_sort <- sort(rowMeans(counts(exp_100, normalized = T)), decreasing = T)
exp_100_sort <- exp_100_sort[1:(round(length(exp_100_sort)*1))]
exp_100 <- exp_100[rownames(counts(exp_100)) %in% names(exp_100_sort),]
summary(exp_100_sort)
summary(exp_100)
#
#Keeping the top 60% expressing the genes
exp_60 <-estimateSizeFactors(DESeq_input)
exp_60_sort <- sort(rowMeans(counts(exp_60, normalized = T)), decreasing = T)
exp_60_sort <- exp_60_sort[1:(round(length(exp_60_sort)*.60))]
exp_60 <- exp_60[rownames(counts(exp_60)) %in% names(exp_60_sort),]
summary(exp_60_sort)
summary(exp_60)
#plotting expression count histograms
hist(exp_100_sort, breaks = 1000000, col = "grey", xlim=c(0,100), ylim=c(0,100))
hist(exp_60_sort, breaks = 1000000, col = "grey", xlim=c(0,100), ylim=c(0,100))
View(count_data)
#performing DESeq2 on exp_100_sort
DESeq_100 <-DESeq(exp_100)
plotDispEsts(DESeq_100)
#
#performing DESeq2 on exp_60_sort
DESeq_60 <-DESeq(exp_60)
plotDispEsts(DESeq_run_exp_60)
plotDispEsts(DESeq_60)
#normalising the counts exp_100
normal_count_exp_100 <-counts(DESeq_100, normalized=TRUE)
counts_100 <- as.data.frame(normal_count_exp_100)
normal_count_exp_100
counts_100
#
#normalising the counts exp_60
normal_count_exp_60 <-counts(DESeq_60, normalized=TRUE)
counts_60 <- as.data.frame(normal_count_exp_60)
normal_count_exp_60
counts_60
#extracting the results from DESeq_100
result_100 <- results(DESeq_100)
result_100
#
#extracting the results from DESeq_60
result_60 <- results(DESeq_60)
result_60
library(BinfTools)
# dds is DESeq_100 or DESeq_60
# res is result_100 or result_60
# counts is counts_100 or counts_60
#
# getting HGNC Names from ENSG names for result_exp100
sym_result_100 <- result_100
sym_result_100 <- getSym(object=sym_result_100,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
#
# getting HGNC Names from ENSG names for result_exp60
sym_result_60 <- result_60
sym_result_60 <- getSym(object=sym_result_60,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
head(sym_result_60)
#
# getting HGNC Names from ENSG names for counts_100
sym_counts_100 <- counts_100
sym_counts_100 <- getSym(object=sym_counts_100,
obType="counts",
species="hsapiens",
target="HGNC",
addCol=F)
head(sym_counts_100)
#
# getting HGNC Names from ENSG names for counts_60
sym_counts_60 <- counts_60
sym_counts_60 <- getSym(object=sym_counts_60,
obType="counts",
species="hsapiens",
target="HGNC",
addCol=F)
head(sym_counts_60)
#specific gene sets onloading $V1 takes the first row and reads it as a vector
Gene_set_chol_biosyn <- read.csv('Gene_set_cholesterol_biosynthesis.csv', header = FALSE)$V1
Gene_set_chol_homeo <- read.csv('Gene_set_cholesterol_homeostasis.csv', header = FALSE)$V1
Gene_set_KEGG_endocytosis <- read.csv('Gene_set_KEGG_endocytosis.csv', header = FALSE)$V1
cond<-as.character(DESeq_run_exp_100$condition)
cond_100<-as.character(DESeq_100$condition)
cond_60<-as.character(DESeq_60$condition)
rm(cond_100)
rm(cond_60)
cond<-as.character(DESeq_100$condition)
dim(cond)
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="sym_result_exp100",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
view(cond)
view(cond)
cond
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="sym_result_exp100",
norm="Fibroblast",
eb="se",
col=c("blue","yellow"),
ord=NULL)
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
barGene(genes=Gene_set_chol_biosyn,
aes(x=x, y=y, width=.5)
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
barGene(genes=Gene_set_chol_biosyn,
aes(x=x, y=y, width=.5),
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
barGene(genes=Gene_set_chol_biosyn,
width=.5,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
barGene(genes=Gene_set_chol_homeo,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Homeostasis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col=c("blue","yellow"))
ggplot(sym_counts_100, aes(x=dose, y=len)) +
geom_violin(trim=FALSE)
library(ggplot2)
ggplot(sym_counts_100, aes(x=dose, y=len)) +
geom_violin(trim=FALSE)
ggplot(sym_counts_100, aes(x=len, y=len)) +
geom_violin(trim=FALSE)
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col="Dark2")
geom_violin(trim=FALSE)
ggplot(sym_counts_100, geom_violin(trim=FALSE)
library(ggplot2)
ggplot(sym_counts_100)
DEG<-volcanoPlot(res=sym_result_100, #Results object
title="Fibroblast vs SH-SY5",
p=0.05, #adjusted p-value threshold for DEGs
pval=NULL, #unadjusted p-value threshold for DEGs (in case you don't want to use adjusted)
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=Gene_set_chol_biosyn, #list of genes to label (NULL to not label any)
col=Gene_set_chol_biosyn, #list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol=NULL, #Colour value for upregulated genes, NULL will be red
dncol=NULL) #Colour value for downregulated genes, NULL will be blue)
DEG<-volcanoPlot(res=sym_result_100, #Results object
title="Fibroblast vs SH-SY5",
p=0.05, #adjusted p-value threshold for DEGs
pval=NULL, #unadjusted p-value threshold for DEGs (in case you don't want to use adjusted)
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=Gene_set_chol_biosyn, #list of genes to label (NULL to not label any)
col=NULL, #list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol=NULL, #Colour value for upregulated genes, NULL will be red
dncol=NULL) #Colour value for downregulated genes, NULL will be blue)
DEG<-volcanoPlot(res=sym_result_100, #Results object
title="Fibroblast vs SH-SY5",
p=0.05, #adjusted p-value threshold for DEGs
pval=NULL, #unadjusted p-value threshold for DEGs (in case you don't want to use adjusted)
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=Gene_set_chol_biosyn, #list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol=NULL, #Colour value for upregulated genes, NULL will be red
dncol=NULL) #Colour value for downregulated genes, NULL will be blue)
MA_Plot(res=sym_result_100,
title="Fibroblast vs SH-SY5",
p=0.05,
pval=NULL,
FC=log2(1.5),
lab=Gene_set_chol_biosyn,
col=Gene_set_chol_biosyn,
fclim=NULL, #Same as volcano plot, but will act on y-axis, not x
showNum=T,
returnDEG=F,
sigScale=F, #Scale point size to significance?
upcol=NULL,
dncol=NULL)
dir.create("GO")
GO_res<-GO_GEM(geneList=DEG,
species="hsapiens",
bg=rownames(sym_result_100), #A character vector of genes indicating the background for the GO analysis. Leave NULL to use all genes (if you don't have one)
source="GO:BP", #A character indicating the source - see documentation for all of them
corr="fdr", #How to correct the p-values
iea=F, #Remove genes in terms 'inferred by electronic analysis' ?
prefix="GO/", #Character for output prefix. If named list is provided as geneList, names of the list will be added to the prefix
ts=c(10,500), #numeric of length 2 indicating minimum/maximum term size for results plots
pdf=F, #print figures to pdf?
fig=T, #Show figures in plots in RStudio?
figCols=c("blue","orange"), #colours for enrichment/significance in plots
returnGost=F, #Return gprofiler2 gost object
writeRes=F, #Write results to ".GO.txt" file
writeGem=F, #Write gem file?
writeGene=F, #Write genes in query to file?
returnRes=T) #Return the results table (only one of returnRes or returnGost can be T, not both)
GO_res<-GO_GEM(geneList=DEG,
species="hsapiens",
bg=rownames(sym_result_100), #A character vector of genes indicating the background for the GO analysis. Leave NULL to use all genes (if you don't have one)
source="GO:BP", #A character indicating the source - see documentation for all of them
corr="fdr", #How to correct the p-values
iea=F, #Remove genes in terms 'inferred by electronic analysis' ?
prefix="GO/", #Character for output prefix. If named list is provided as geneList, names of the list will be added to the prefix
ts=c(10,500), #numeric of length 2 indicating minimum/maximum term size for results plots
pdf=T, #print figures to pdf?
fig=T, #Show figures in plots in RStudio?
figCols=c("blue","orange"), #colours for enrichment/significance in plots
returnGost=T, #Return gprofiler2 gost object
writeRes=T, #Write results to ".GO.txt" file
writeGem=T, #Write gem file?
writeGene=F, #Write genes in query to file?
returnRes=T) #Return the results table (only one of returnRes or returnGost can be T, not both)
GO_gost<-GO_GEM(geneList=DEG,
species="hsapiens",
bg=rownames(sym_result_100),
source="GO:BP",
prefix="GO/",
pdf=F,
fig=F,
returnGost=T,
writeRes=F)
BinfTools:::combGO_plot(GOresList=GO_res,
title="Biological process - significant",
ts=c(10,500),
sig=T,
numTerm=10,
upcols=c("lightpink","red"),
downcols=c("lightblue","blue"))
BinfTools:::combGO_plot(GOresList=GO_res,
title="Biological process - enriched",
ts=c(10,500),
sig=F,
numTerm=10,
upcols=c("lightpink","red"),
downcols=c("lightblue","blue"))
rnk<-GenerateGSEA(res=symRes, #Results object
filename="GSEA.rnk", #Output rnk file name for GSEA preranked outside of R
bystat=T, #Rank genes by stats? will use Wald statistic or if not nere, -log10(p-value) with the direction from the log2FoldChange
byFC=F, #Rank genes by log2FoldChange? I like to use this with the shrunken log fold change from DESEq2
retRNK=T) #Return the RNK object? yes, to run GSEA in R
rnk<-GenerateGSEA(res=sym_result_100, #Results object
filename="GSEA.rnk", #Output rnk file name for GSEA preranked outside of R
bystat=T, #Rank genes by stats? will use Wald statistic or if not nere, -log10(p-value) with the direction from the log2FoldChange
byFC=F, #Rank genes by log2FoldChange? I like to use this with the shrunken log fold change from DESEq2
retRNK=T) #Return the RNK object? yes, to run GSEA in R
library(gpGeneSets)
gsea_res<-GSEA(rnk=rnk, #Rnk object
gmt=gp_dm, #either .gmt filename or a loaded gene set
pval=1, #adjusted p-value threshold for terms to return, set to 1 to return all terms and filter later
ts=c(10,600), #min/max term sizes to filter terms BEFORE analysis
nperm=10000, #number of permuations for p-value generation
parseBader=F) #Set to TRUE if using Gary's genesets - it will parse the term names so it looks neater. I'm not using gary's genesets here, so we will set to FALSE
rows<-c(1, nrow(gsea_res))
enPlot(gseaRes=gsea_res[rows,], #GSEA results table subset into the rows of interest to make a plot
rnk=rnk, #Original rnk object used to make gsea_res
gmt=gp_dm, #Original gmt object/filename used to make gsea_res
title=NULL) #character vector of length (nrow(gseaRes)) for custom titles, or leave NULL for automatic titles - works better for Gary's genesets
cholesterol<-c(customGMT(gost=GO_gost$Down, #gost object from GO_GEM and returnGost=T
key="cholesterol", #keyword to pull gene sets - this is a grep, so anything with this key will be pulled - the resulting geneset may require some manual curation so check the names
gmt=gp_dm), #The gpGeneSets object containing the complete gene sets 'gp_hs' for human, 'gp_mm' for mouse and 'gp_dm' for drosophila
customGMT(gost=GO_gost$Up,
key="cholesterol",
gmt=gp_dm))
View(cholesterol)
write.gmt(geneSet=cholesterol,
filename="cholesterol.gmt")
write.txt(geneSet=cholesterol,
filename="cholesterol.txt")
write.csv(geneSet=cholesterol,
filename="cholesterol.csv")
forVenn<-list(DE_Up=DEG$Up,
DE_Down=DEG$Down,
Rhodopsin=unique(unlist(cholesterol)))
plotVenn(x=forVenn, #name list for plotting Venn diagram
title="cholesterol related genes",
cols="Dark2", #Colour scheme for plot
lty="blank", #outlines for circles
scale=F, #Scale to list sizes?
retVals=F) #Return list of values in overlaps?
forVenn<-list(DE_Up=DEG$Up,
DE_Down=DEG$Down,
cholesterol=unique(unlist(cholesterol)))
plotVenn(x=forVenn, #name list for plotting Venn diagram
title="cholesterol related genes",
cols="Dark2", #Colour scheme for plot
lty="blank", #outlines for circles
scale=F, #Scale to list sizes?
retVals=F) #Return list of values in overlaps?
gsva_plot(counts=as.matrix(symCounts), #counts object (as matrix), make sure rownames are the same nomenclature as the gene symbols in geneset
geneset=cholesterol,
method="gsva", #Method for gsva plot - see documentation for options
condition=cond,
con="WT", #Indicate the control condition
title="cholesterol ssGSEA",
compare=NULL, #for pairwise t-tests, leave NULL to do all possible comparisons, or provide a list of vectors, length 2 indicating the conditions to compare
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of rgb(), hexadecimal, or colour names
style="violin")
gsva_plot(counts=as.matrix(sym_counts_100), #counts object (as matrix), make sure rownames are the same nomenclature as the gene symbols in geneset
geneset=cholesterol,
method="gsva", #Method for gsva plot - see documentation for options
condition=cond,
con="WT", #Indicate the control condition
title="cholesterol ssGSEA",
compare=NULL, #for pairwise t-tests, leave NULL to do all possible comparisons, or provide a list of vectors, length 2 indicating the conditions to compare
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of rgb(), hexadecimal, or colour names
style="violin")
View(sym_counts_100)
sym_counts_100_1 <- counts_100
sym_counts_100_1 <- getSym(object=sym_counts_100_1,
obType="counts",
species="hsapiens",
target="ESNG",
addCol=F)
head(sym_counts_100_1)
#
# getting HGNC Names from ENSG names for counts_100
sym_counts_100 <- counts_100
gsva_plot(counts=as.matrix(counts_100), #counts object (as matrix), make sure rownames are the same nomenclature as the gene symbols in geneset
geneset=cholesterol,
method="gsva", #Method for gsva plot - see documentation for options
condition=cond,
con="WT", #Indicate the control condition
title="cholesterol ssGSEA",
compare=NULL, #for pairwise t-tests, leave NULL to do all possible comparisons, or provide a list of vectors, length 2 indicating the conditions to compare
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of rgb(), hexadecimal, or colour names
style="violin")
count_plot(counts=symCounts,
scaling="none", #Can be "zscore" to emphasize differences, or 'log10', or "none"
genes=unique(unlist(rhodopsin)), #Character vector of gene names - need to unlist the geneset for this
condition=cond,
con="WT",
title="Rhodopsin Genes Expression",
compare=NULL,
col="Dark2",
method="perMean", #What method to plot? "mean", "median", "perMean", "ind", "geoMean"
pair=F, #Paired t-tests?
pc=1, #pseudocount if scaling="log10"
yax="Percent Mean Expression", #y-axis label if default isn't descriptive enough
showStat=T, #Show statistics on plot?
style="box") #Default is violin
#Bioconductor packages don't install automatically on BinfTools install
BiocManager::install("SAGx")
raw_counts <- read.csv("raw_counts_HGNC.csv", header = TRUE, row.names = 1)
# setting the directory
setwd("/Users/madhavmakkena/Downloads/RNAseq")
raw_counts <- read.csv("raw_counts_HGNC.csv", header = TRUE, row.names = 1)
View(raw_counts)
sample_cond <- read.csv('sample_conditions.csv', header = TRUE, row.names = "sample")
all (rownames(sample_cond) %in% colnames(raw_counts))
all (rownames(sample_cond) == colnames(raw_counts))
# cleaning up raw_counts to remove genes with 0 counts in ALL samples
raw_counts<- raw_counts[rowSums(raw_counts) != 0, ]
#DESeq analysis
library(DESeq2)
DESeq <- DESeqDataSetFromMatrix(countData = raw_counts, colData = sample_cond, design = ~ condition)
DESeq_hist <- sort(rowMeans(counts(estimateSizeFactors(DESeq), normalized = T)), decreasing = T)
summary(DESeq)
summary(DESeq_hist)
#performing DESeq2 on DESeq
DESeq <-DESeq(DESeq)
#normalising the counts exp
count <- as.data.frame(counts(DESeq, normalized=TRUE))
head(count,10)
#extracting the results from DESeq
# result <- as.data.frame(results(DESeq, contrast=c("condition", "Fibroblast", "SH-SY5Y")))
result <- as.data.frame(results(DESeq))
head(result,10)
#installing packages for BinfTools
# BiocManager::install("SAGx")
# BiocManager::install("GSVA")
# BiocManager::install("fgsea")
# BiocManager::install("gage")
# BiocManager::install("qusage")
# devtools::install_github("kevincjnixon/gpGeneSets")
# devtools::install_github("kevincjnixon/BinfTools", force = TRUE)
# devtools::update_packages("BinfTools")
# library("BinfTools")
lapply(c("SAGx", "GSVA", "fgsea", "gage", "qusage", "gpGeneSets", "BinfTools"), require, character.only = TRUE)
#
count_HGNC_cholesterol <- read.csv("count_HGNC_cholesterol.csv", row.names = 1, header = TRUE)
result_HGNC_cholesterol <- read.csv("result_HGNC_cholesterol.csv", row.names = 1, header = TRUE)
#
par(mfrow=c(2,3))
plotCounts(DESeq, gene="NPC1", intgroup="condition", trans=c("log10"))
plotCounts(DESeq, gene="NPC1", intgroup="condition", transform=F)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("acidgenomics/acidplots")
install.packages("acidgenomics/acidplots")
plotCounts(DESeq, gene="NPC1", intgroup="condition", trans = c("log10"))
plotCounts(DESeq, gene="NPC2", intgroup="condition", transform=F)
# setting the directory
setwd("/Users/madhavmakkena/Downloads/RNAseq")
# loading the count data (already in a single file and names replaced with HGNC)
raw_counts <- read.csv("raw_counts_HGNC.csv", header = TRUE, row.names = 1)
# loading the sample information
sample_cond <- read.csv('sample_conditions.csv', header = TRUE, row.names = "sample")
# checking if the sample names in sample data match the count data
all (rownames(sample_cond) %in% colnames(raw_counts))
all (rownames(sample_cond) == colnames(raw_counts))
# cleaning up raw_counts to remove genes with 0 counts in ALL samples
raw_counts<- raw_counts[rowSums(raw_counts) != 0, ]
#DESeq prep
library(DESeq2)
DESeq <- DESeqDataSetFromMatrix(countData = raw_counts, colData = sample_cond, design = ~ condition)
DESeq_hist <- sort(rowMeans(counts(estimateSizeFactors(DESeq), normalized = T)), decreasing = T)
summary(DESeq)
summary(DESeq_hist)
#performing DESeq2 on DESeq
DESeq <-DESeq(DESeq)
#normalising the counts exp
count <- as.data.frame(counts(DESeq, normalized=TRUE))
head(count,10)
#extracting the results from DESeq
result <- as.data.frame(results(DESeq))
head(result,10)
#installing packages for BinfTools
# BiocManager::install("SAGx")
# BiocManager::install("GSVA")
# BiocManager::install("fgsea")
# BiocManager::install("gage")
# BiocManager::install("qusage")
# devtools::install_github("kevincjnixon/gpGeneSets")
# devtools::install_github("kevincjnixon/BinfTools", force = TRUE)
# devtools::update_packages("BinfTools")
# library("BinfTools")
lapply(c("SAGx", "GSVA", "fgsea", "gage", "qusage", "gpGeneSets", "BinfTools"), require, character.only = TRUE)
#
count_HGNC_cholesterol <- read.csv("count_HGNC_cholesterol.csv", row.names = 1, header = TRUE)
