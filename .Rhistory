library(ggplot2)
ggplot(sym_counts_100, aes(x=dose, y=len)) +
geom_violin(trim=FALSE)
ggplot(sym_counts_100, aes(x=len, y=len)) +
geom_violin(trim=FALSE)
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+sym_counts_100),
conditions=cond,
title="Cholesterol Biosynthesis",
norm="Fibroblast",
eb="se",
returnDat=T,
ord=c("Fibroblast","SH-SY5Y"),
col="Dark2")
geom_violin(trim=FALSE)
ggplot(sym_counts_100, geom_violin(trim=FALSE)
library(ggplot2)
ggplot(sym_counts_100)
DEG<-volcanoPlot(res=sym_result_100, #Results object
title="Fibroblast vs SH-SY5",
p=0.05, #adjusted p-value threshold for DEGs
pval=NULL, #unadjusted p-value threshold for DEGs (in case you don't want to use adjusted)
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=Gene_set_chol_biosyn, #list of genes to label (NULL to not label any)
col=Gene_set_chol_biosyn, #list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol=NULL, #Colour value for upregulated genes, NULL will be red
dncol=NULL) #Colour value for downregulated genes, NULL will be blue)
DEG<-volcanoPlot(res=sym_result_100, #Results object
title="Fibroblast vs SH-SY5",
p=0.05, #adjusted p-value threshold for DEGs
pval=NULL, #unadjusted p-value threshold for DEGs (in case you don't want to use adjusted)
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=Gene_set_chol_biosyn, #list of genes to label (NULL to not label any)
col=NULL, #list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol=NULL, #Colour value for upregulated genes, NULL will be red
dncol=NULL) #Colour value for downregulated genes, NULL will be blue)
DEG<-volcanoPlot(res=sym_result_100, #Results object
title="Fibroblast vs SH-SY5",
p=0.05, #adjusted p-value threshold for DEGs
pval=NULL, #unadjusted p-value threshold for DEGs (in case you don't want to use adjusted)
FC=log2(1.5), #log2FoldChange threshold for DEGs (can be 0)
lab=NULL, #list of genes to label (NULL to not label any)
col=Gene_set_chol_biosyn, #list of genes to colour (NULL to not colour any)
fclim=NULL, #x-axis (log2FoldChange) limits, genes passing this limit will be represented as triangles on the edge of the plot - good if you have some extreme outliers
showNum=T, #Show the numbers of genes on the plot?
returnDEG=T, #Return list of DEGs (Down, Up) - this is good for running GO later on
expScale=F, #Scale point size to mean expression?
upcol=NULL, #Colour value for upregulated genes, NULL will be red
dncol=NULL) #Colour value for downregulated genes, NULL will be blue)
MA_Plot(res=sym_result_100,
title="Fibroblast vs SH-SY5",
p=0.05,
pval=NULL,
FC=log2(1.5),
lab=Gene_set_chol_biosyn,
col=Gene_set_chol_biosyn,
fclim=NULL, #Same as volcano plot, but will act on y-axis, not x
showNum=T,
returnDEG=F,
sigScale=F, #Scale point size to significance?
upcol=NULL,
dncol=NULL)
dir.create("GO")
GO_res<-GO_GEM(geneList=DEG,
species="hsapiens",
bg=rownames(sym_result_100), #A character vector of genes indicating the background for the GO analysis. Leave NULL to use all genes (if you don't have one)
source="GO:BP", #A character indicating the source - see documentation for all of them
corr="fdr", #How to correct the p-values
iea=F, #Remove genes in terms 'inferred by electronic analysis' ?
prefix="GO/", #Character for output prefix. If named list is provided as geneList, names of the list will be added to the prefix
ts=c(10,500), #numeric of length 2 indicating minimum/maximum term size for results plots
pdf=F, #print figures to pdf?
fig=T, #Show figures in plots in RStudio?
figCols=c("blue","orange"), #colours for enrichment/significance in plots
returnGost=F, #Return gprofiler2 gost object
writeRes=F, #Write results to ".GO.txt" file
writeGem=F, #Write gem file?
writeGene=F, #Write genes in query to file?
returnRes=T) #Return the results table (only one of returnRes or returnGost can be T, not both)
GO_res<-GO_GEM(geneList=DEG,
species="hsapiens",
bg=rownames(sym_result_100), #A character vector of genes indicating the background for the GO analysis. Leave NULL to use all genes (if you don't have one)
source="GO:BP", #A character indicating the source - see documentation for all of them
corr="fdr", #How to correct the p-values
iea=F, #Remove genes in terms 'inferred by electronic analysis' ?
prefix="GO/", #Character for output prefix. If named list is provided as geneList, names of the list will be added to the prefix
ts=c(10,500), #numeric of length 2 indicating minimum/maximum term size for results plots
pdf=T, #print figures to pdf?
fig=T, #Show figures in plots in RStudio?
figCols=c("blue","orange"), #colours for enrichment/significance in plots
returnGost=T, #Return gprofiler2 gost object
writeRes=T, #Write results to ".GO.txt" file
writeGem=T, #Write gem file?
writeGene=F, #Write genes in query to file?
returnRes=T) #Return the results table (only one of returnRes or returnGost can be T, not both)
GO_gost<-GO_GEM(geneList=DEG,
species="hsapiens",
bg=rownames(sym_result_100),
source="GO:BP",
prefix="GO/",
pdf=F,
fig=F,
returnGost=T,
writeRes=F)
BinfTools:::combGO_plot(GOresList=GO_res,
title="Biological process - significant",
ts=c(10,500),
sig=T,
numTerm=10,
upcols=c("lightpink","red"),
downcols=c("lightblue","blue"))
BinfTools:::combGO_plot(GOresList=GO_res,
title="Biological process - enriched",
ts=c(10,500),
sig=F,
numTerm=10,
upcols=c("lightpink","red"),
downcols=c("lightblue","blue"))
rnk<-GenerateGSEA(res=symRes, #Results object
filename="GSEA.rnk", #Output rnk file name for GSEA preranked outside of R
bystat=T, #Rank genes by stats? will use Wald statistic or if not nere, -log10(p-value) with the direction from the log2FoldChange
byFC=F, #Rank genes by log2FoldChange? I like to use this with the shrunken log fold change from DESEq2
retRNK=T) #Return the RNK object? yes, to run GSEA in R
rnk<-GenerateGSEA(res=sym_result_100, #Results object
filename="GSEA.rnk", #Output rnk file name for GSEA preranked outside of R
bystat=T, #Rank genes by stats? will use Wald statistic or if not nere, -log10(p-value) with the direction from the log2FoldChange
byFC=F, #Rank genes by log2FoldChange? I like to use this with the shrunken log fold change from DESEq2
retRNK=T) #Return the RNK object? yes, to run GSEA in R
library(gpGeneSets)
gsea_res<-GSEA(rnk=rnk, #Rnk object
gmt=gp_dm, #either .gmt filename or a loaded gene set
pval=1, #adjusted p-value threshold for terms to return, set to 1 to return all terms and filter later
ts=c(10,600), #min/max term sizes to filter terms BEFORE analysis
nperm=10000, #number of permuations for p-value generation
parseBader=F) #Set to TRUE if using Gary's genesets - it will parse the term names so it looks neater. I'm not using gary's genesets here, so we will set to FALSE
rows<-c(1, nrow(gsea_res))
enPlot(gseaRes=gsea_res[rows,], #GSEA results table subset into the rows of interest to make a plot
rnk=rnk, #Original rnk object used to make gsea_res
gmt=gp_dm, #Original gmt object/filename used to make gsea_res
title=NULL) #character vector of length (nrow(gseaRes)) for custom titles, or leave NULL for automatic titles - works better for Gary's genesets
cholesterol<-c(customGMT(gost=GO_gost$Down, #gost object from GO_GEM and returnGost=T
key="cholesterol", #keyword to pull gene sets - this is a grep, so anything with this key will be pulled - the resulting geneset may require some manual curation so check the names
gmt=gp_dm), #The gpGeneSets object containing the complete gene sets 'gp_hs' for human, 'gp_mm' for mouse and 'gp_dm' for drosophila
customGMT(gost=GO_gost$Up,
key="cholesterol",
gmt=gp_dm))
View(cholesterol)
write.gmt(geneSet=cholesterol,
filename="cholesterol.gmt")
write.txt(geneSet=cholesterol,
filename="cholesterol.txt")
write.csv(geneSet=cholesterol,
filename="cholesterol.csv")
forVenn<-list(DE_Up=DEG$Up,
DE_Down=DEG$Down,
Rhodopsin=unique(unlist(cholesterol)))
plotVenn(x=forVenn, #name list for plotting Venn diagram
title="cholesterol related genes",
cols="Dark2", #Colour scheme for plot
lty="blank", #outlines for circles
scale=F, #Scale to list sizes?
retVals=F) #Return list of values in overlaps?
forVenn<-list(DE_Up=DEG$Up,
DE_Down=DEG$Down,
cholesterol=unique(unlist(cholesterol)))
plotVenn(x=forVenn, #name list for plotting Venn diagram
title="cholesterol related genes",
cols="Dark2", #Colour scheme for plot
lty="blank", #outlines for circles
scale=F, #Scale to list sizes?
retVals=F) #Return list of values in overlaps?
gsva_plot(counts=as.matrix(symCounts), #counts object (as matrix), make sure rownames are the same nomenclature as the gene symbols in geneset
geneset=cholesterol,
method="gsva", #Method for gsva plot - see documentation for options
condition=cond,
con="WT", #Indicate the control condition
title="cholesterol ssGSEA",
compare=NULL, #for pairwise t-tests, leave NULL to do all possible comparisons, or provide a list of vectors, length 2 indicating the conditions to compare
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of rgb(), hexadecimal, or colour names
style="violin")
gsva_plot(counts=as.matrix(sym_counts_100), #counts object (as matrix), make sure rownames are the same nomenclature as the gene symbols in geneset
geneset=cholesterol,
method="gsva", #Method for gsva plot - see documentation for options
condition=cond,
con="WT", #Indicate the control condition
title="cholesterol ssGSEA",
compare=NULL, #for pairwise t-tests, leave NULL to do all possible comparisons, or provide a list of vectors, length 2 indicating the conditions to compare
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of rgb(), hexadecimal, or colour names
style="violin")
View(sym_counts_100)
sym_counts_100_1 <- counts_100
sym_counts_100_1 <- getSym(object=sym_counts_100_1,
obType="counts",
species="hsapiens",
target="ESNG",
addCol=F)
head(sym_counts_100_1)
#
# getting HGNC Names from ENSG names for counts_100
sym_counts_100 <- counts_100
gsva_plot(counts=as.matrix(counts_100), #counts object (as matrix), make sure rownames are the same nomenclature as the gene symbols in geneset
geneset=cholesterol,
method="gsva", #Method for gsva plot - see documentation for options
condition=cond,
con="WT", #Indicate the control condition
title="cholesterol ssGSEA",
compare=NULL, #for pairwise t-tests, leave NULL to do all possible comparisons, or provide a list of vectors, length 2 indicating the conditions to compare
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of rgb(), hexadecimal, or colour names
style="violin")
count_plot(counts=symCounts,
scaling="none", #Can be "zscore" to emphasize differences, or 'log10', or "none"
genes=unique(unlist(rhodopsin)), #Character vector of gene names - need to unlist the geneset for this
condition=cond,
con="WT",
title="Rhodopsin Genes Expression",
compare=NULL,
col="Dark2",
method="perMean", #What method to plot? "mean", "median", "perMean", "ind", "geoMean"
pair=F, #Paired t-tests?
pc=1, #pseudocount if scaling="log10"
yax="Percent Mean Expression", #y-axis label if default isn't descriptive enough
showStat=T, #Show statistics on plot?
style="box") #Default is violin
#Bioconductor packages don't install automatically on BinfTools install
BiocManager::install("SAGx")
# setting the directory
setwd("/Users/madhavmakkena/Downloads/RNAseq")
# loading the count data (only when its already in a single file)
raw_counts <- read.csv("combined_single.csv", header = TRUE, sep = ",", row.names = "ENSGene")
barplot(colSums(raw_counts), col= c("C_1" = "orange","C_2" = "orange","S_1" = "lightblue", "S_2" = "lightblue"))
# loading the sample information
sample_cond <- read.csv('sample_conditions.csv', header = TRUE, row.names = "sample")
# checking if the sample names in sample data match the count data
all (rownames(sample_cond) %in% colnames(raw_counts))
all (rownames(sample_cond) == colnames(raw_counts))
# cleaning up raw_counts to remove genes with 0 counts in ALL samples
raw_counts<- raw_counts[rowSums(raw_counts) != 0, ]
#DESeq analysis
#storing the input values from raw_counts
library(DESeq2)
DESeq <- DESeqDataSetFromMatrix(countData = raw_counts, colData = sample_cond, design = ~ condition)
View(raw_counts)
# loading the count data (only when its already in a single file)
raw_counts <- read.csv("combined_single.csv", header = TRUE, sep = ",", row.names = "ENSGene")
View(raw_counts)
# loading the sample information
sample_cond <- read.csv('sample_conditions.csv', header = TRUE, row.names = "sample")
# checking if the sample names in sample data match the count data
all (rownames(sample_cond) %in% colnames(raw_counts))
all (rownames(sample_cond) == colnames(raw_counts))
# cleaning up raw_counts to remove genes with 0 counts in ALL samples
raw_counts<- raw_counts[rowSums(raw_counts) != 0, ]
#DESeq analysis
#storing the input values from raw_counts
library(DESeq2)
DESeq <- DESeqDataSetFromMatrix(countData = raw_counts, colData = sample_cond, design = ~ condition)
DESeq_hist <- sort(rowMeans(counts(estimateSizeFactors(DESeq), normalized = T)), decreasing = T)
summary(DESeq)
summary(DESeq_hist)
#plotting expression count histograms
hist(DESeq_hist, breaks = 1000000, col = "grey", xlim=c(0,100), , ylim=c(0,100))
#performing DESeq2 on DESeq
DESeq <-DESeq(DESeq)
#normalising the counts exp
count <- as.data.frame(counts(DESeq, normalized=TRUE))
head(count,10)
#extracting the results from DESeq
result <- as.data.frame(results(DESeq, contrast=c("condition", "Fibroblast", "SH-SY5Y")))
head(result,10)
#extracting the conditions from DESeq
cond<-as.character(DESeq$condition)
#installing packages for BinfTools
# BiocManager::install("SAGx")
# BiocManager::install("GSVA")
# BiocManager::install("fgsea")
# BiocManager::install("gage")
# BiocManager::install("qusage")
# devtools::install_github("kevincjnixon/gpGeneSets")
# devtools::install_github("kevincjnixon/BinfTools", force = TRUE)
# devtools::update_packages("BinfTools")
# library("BinfTools")
lapply(c("SAGx", "GSVA", "fgsea", "gage", "qusage", "gpGeneSets", "BinfTools"), require, character.only = TRUE)
# getting HGNC Names from ENSG names for result
result_HGCN <- result
result_HGCN <- getSym(object=result_HGCN,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
#if already performed
result_HGCN <- read.csv("result_HGCN.csv", row.names = TRUE)
#if already performed
result_HGCN <- read.csv("result_HGCN.csv", row.names = 1, header = TRUE)
View(result_HGCN)
#if already performed
result_HGCN <- read.csv("result_HGCN.csv", row.names = 1, header = TRUE)
result_HGCN <- getSym(object=result_HGCN,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
head(result_HGCN)
# getting HGNC Names from ENSG names for result
result_HGCN <- result
#if already performed
# result_HGCN <- read.csv("result_HGCN.csv", row.names = 1, header = TRUE)
result_HGCN <- getSym(object=result_HGCN,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
head(result_HGCN)
head(result,10)
write.csv(result_HGCN,"result_HGCN.csv", row.names = TRUE)
# result_HGCN <- getSym(object=result_HGCN,
#                obType="res",
#                species="hsapiens",
#                target="HGNC",
#                addCol=F)
# head(result_HGCN)
# write.csv(result_HGCN,"result_HGCN.csv", row.names = TRUE)
#if already performed
result_HGCN <- read.csv("result_HGCN.csv", row.names = 1, header = TRUE)
# getting HGNC Names from ENSG names for count
count_HGCN <- count
rm(result_HGCN)
# getting HGNC Names from ENSG names for result
result_HGNC <- result
rm(count_HGCN)
# count_HGNC <- getSym(object=count_HGNC,
#                         obType="counts",
#                         species="hsapiens",
#                         target="HGNC",
#                         addCol=F)
# head(count_HGNC)
# write.csv(count_HGNC,"count_HGNC.csv", row.names = TRUE)
#if already performed
count_HGNC <- read.csv("count_HGNC.csv", row.names = 1, header = TRUE)
# count_HGNC <- getSym(object=count_HGNC,
#                         obType="counts",
#                         species="hsapiens",
#                         target="HGNC",
#                         addCol=F)
# head(count_HGNC)
# write.csv(count_HGNC,"count_HGNC.csv", row.names = TRUE)
#if already performed
count_HGNC <- read.csv("count_HGNC.csv", row.names = 1, header = TRUE)
# getting HGNC Names from ENSG names for count
count_HGNC <- count
count_HGNC <- getSym(object=count_HGNC,
obType="counts",
species="hsapiens",
target="HGNC",
addCol=F)
head(count_HGNC)
write.csv(count_HGNC,"count_HGNC.csv", row.names = TRUE)
# getting HGNC Names from ENSG names for count
# count_HGNC <- count
# count_HGNC <- getSym(object=count_HGNC,
#                         obType="counts",
#                         species="hsapiens",
#                         target="HGNC",
#                         addCol=F)
# head(count_HGNC)
# write.csv(count_HGNC,"count_HGNC.csv", row.names = TRUE)
#if already performed
count_HGNC <- read.csv("count_HGNC.csv", row.names = 1, header = TRUE)
# getting HGNC Names from ENSG names for result
result_HGNC <- result
result_HGNC <- getSym(object=result_HGNC,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
head(result_HGNC)
write.csv(result_HGNC,"result_HGNC.csv", row.names = TRUE)
# result_HGNC <- getSym(object=result_HGNC,
#                obType="res",
#                species="hsapiens",
#                target="HGNC",
#                addCol=F)
# head(result_HGNC)
# write.csv(result_HGNC,"result_HGNC.csv", row.names = TRUE)
#if already performed
result_HGNC <- read.csv("result_HGNC.csv", row.names = 1, header = TRUE)
count_HGNC_cholesterol <- read.csv("count_HGNC_cholesterol.csv", row.names = 1, header = TRUE)
result_HGNC_cholesterol <- read.csv("result_HGNC_cholesterol.csv", row.names = 1, header = TRUE)
dds <- DESeq
dds <- as.data.frame(DESeq)
rld <- rlog(DESeq)
View(rld)
rld <- as.data.frame(rld)
rm(dds)
rm(rld)
test <- DESeqDataSetFromMatrix(countData = count_HGNC, colData = sample_cond, design = ~ condition)
View(count_HGNC)
rm(test)
test <- raw_counts
test <- getSym(object=test,
obType="counts",
species="hsapiens",
target="HGNC",
addCol=F)
head(test)
View(test)
View(test)
View(raw_counts)
# setting the directory
setwd("/Users/madhavmakkena/Downloads/RNAseq")
# loading the count data (only when its already in a single file)
raw_counts <- read.csv("combined_single.csv", header = TRUE, sep = ",", row.names = "ENSGene")
# loading the count data (only when its already in a single file)
raw_counts <- read.csv("combined_single.csv", header = TRUE, sep = ",", row.names = "ENSGene")
# barplot(colSums(raw_counts), col= c("C_1" = "orange","C_2" = "orange","S_1" = "lightblue", "S_2" = "lightblue"))
# head(raw_counts, 10)
raw_counts <- getSym(object=raw_counts,
obType="counts",
species="hsapiens",
target="HGNC",
addCol=F)
head(raw_counts)
View(raw_counts)
write.csv(raw_counts_HGNC,"raw_counts_HGNC.csv", row.names = TRUE)
write.csv(raw_counts,"raw_counts_HGNC.csv", row.names = TRUE)
View(raw_counts)
raw_counts <- read.csv("raw_counts_HGNC.csv", header = TRUE, row.names = 1)
# loading the sample information
sample_cond <- read.csv('sample_conditions.csv', header = TRUE, row.names = "sample")
# checking if the sample names in sample data match the count data
all (rownames(sample_cond) %in% colnames(raw_counts))
all (rownames(sample_cond) == colnames(raw_counts))
# cleaning up raw_counts to remove genes with 0 counts in ALL samples
raw_counts<- raw_counts[rowSums(raw_counts) != 0, ]
#DESeq analysis
#storing the input values from raw_counts
library(DESeq2)
DESeq <- DESeqDataSetFromMatrix(countData = raw_counts, colData = sample_cond, design = ~ condition)
DESeq_hist <- sort(rowMeans(counts(estimateSizeFactors(DESeq), normalized = T)), decreasing = T)
summary(DESeq)
summary(DESeq_hist)
#performing DESeq2 on DESeq
DESeq <-DESeq(DESeq)
#normalising the counts exp
count <- as.data.frame(counts(DESeq, normalized=TRUE))
head(count,10)
#extracting the results from DESeq
result <- as.data.frame(results(DESeq, contrast=c("condition", "Fibroblast", "SH-SY5Y")))
head(result,10)
#extracting the conditions from DESeq
cond<-as.character(DESeq$condition)
#installing packages for BinfTools
# BiocManager::install("SAGx")
# BiocManager::install("GSVA")
# BiocManager::install("fgsea")
# BiocManager::install("gage")
# BiocManager::install("qusage")
# devtools::install_github("kevincjnixon/gpGeneSets")
# devtools::install_github("kevincjnixon/BinfTools", force = TRUE)
# devtools::update_packages("BinfTools")
# library("BinfTools")
lapply(c("SAGx", "GSVA", "fgsea", "gage", "qusage", "gpGeneSets", "BinfTools"), require, character.only = TRUE)
dds <- DESeq
countdata <- assay(count)
BiocManager::install("SummarizedExperiment")
library("SummarizedExperiment")
countdata <- assay(count)
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
head(assay(vsd), 3)
ntd <- normTransform(dds)
library("vsn")
meanSdPlot(assay(ntd))
meanSdPlot(assay(vsd))
meanSdPlot(assay(rld))
library("pheatmap")
select <- order(rowMeans(counts(dds,normalized=TRUE)),
decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition","type")])
df <- as.data.frame(colData(dds)[,c("condition")])
pheatmap(assay(ntd)[select,], cluster_rows=FALSE, show_rownames=FALSE,
cluster_cols=FALSE, annotation_col=df)
sampleDists <- dist(t(assay(vsd)))
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$condition, vsd$type, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
plotPCA(vsd, intgroup=c("condition"))
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
dds <- nbinomWaldTest(dds)
results(dds, contrast=c("condition","C","B"))
results(dds, contrast=c("condition","C_1","C_2"))
results(dds, contrast=c("condition","Fibroblast","SH_SY5Y"))
results(dds, contrast=c("condition"))
results(dds, contrast=c("condition", "Fibroblast_C1", "Fibroblast_C2"))
results(dds, contrast=c("condition", "C1_Fibroblast", "C2_Fibroblast"))
par(mar=c(8,5,2,2))
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2)
summary(res)
