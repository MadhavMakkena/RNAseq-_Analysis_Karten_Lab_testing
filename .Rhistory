head(count_data, 10)
#setting the directory
setwd("/Users/madhavmakkena/Downloads/RNAseq")
#loading the count data (already in a single file)
count_data <- read.csv("combined_single.csv", header = TRUE, sep = ",", row.names = "ENSGene")
head(count_data, 10)
#loading the sample information
sample_data <- read.csv('metadata.csv', header = TRUE, row.names = 1)
#loading the sample information
sample_data <- read.csv('sample_conditions.csv', header = TRUE, row.names = "sample")
sample_data
#checking if the sample names in sample data match the count data
#should be TRUE
all (rownames(sample_data) %in% colnames(count_data))
all (rownames(sample_data) == colnames(count_data))
#cleaning up count data to remove genes with 0 coutns in all conditions
count_data_clean <- count_data
count_data_clean <- count_data_clean[rowSums(count_data_clean) !=0, ]
#viewing the first 10 records to check
head(count_data,10)
head(count_data_clean,10)
#DESeq analysis
#storing the input values from count_data_clean
DESeq_input <- DESeqDataSetFromMatrix(countData = count_data_clean, colData = sample_data, design = ~ condition)
#DESeq analysis
library(DESeq2)
#storing the input values from count_data_clean
DESeq_input <- DESeqDataSetFromMatrix(countData = count_data_clean, colData = sample_data, design = ~ condition)
#Keeping all the genes
exp_100 <-estimateSizeFactors(DESeq_input)
exp_100_sort <- sort(rowMeans(counts(exp_100, normalized = T)), decreasing = T)
exp_100_sort <- exp_100_sort[1:(round(length(exp_100_sort)*.67))]
#Keeping all the genes
exp_100 <-estimateSizeFactors(DESeq_input)
exp_100_sort <- sort(rowMeans(counts(exp_100, normalized = T)), decreasing = T)
exp_100_sort <- exp_100_sort[1:(round(length(exp_100_sort)*1))]
exp_100 <- exp_100[rownames(counts(exp_100)) %in% names(exp_100_sort),]
summary(exp_100_sort)
summary(exp_100)
#Keeping the top 60% expressing the genes
exp_60 <-estimateSizeFactors(DESeq_input)
exp_60_sort <- sort(rowMeans(counts(exp_60, normalized = T)), decreasing = T)
exp_60_sort <- exp_60_sort[1:(round(length(exp_60_sort)*.60))]
exp_60 <- exp_60[rownames(counts(exp_60)) %in% names(exp_60_sort),]
summary(exp_60_sort)
summary(exp_60)
#plotting dds histogram
hist(exp_100, breaks = 1000000, col = "grey", xlim=c(0,100), ylim=c(0,100))
#plotting dds histogram
hist(exp_100_sort, breaks = 1000000, col = "grey", xlim=c(0,100), ylim=c(0,100))
#plotting dds histogram
hist(exp_100_sort, breaks = 1000000, col = "grey", xlim=c(0,200), ylim=c(0,200))
#plotting dds histogram
hist(exp_100_sort, breaks = 10000000, col = "grey", xlim=c(0,200), ylim=c(0,200))
#plotting dds histogram
hist(exp_100_sort, breaks = 100000, col = "grey", xlim=c(0,200), ylim=c(0,200))
#plotting dds histogram
hist(exp_100_sort, breaks = 1000000, col = "grey", xlim=c(0,100), ylim=c(0,100))
hist(exp_60_sort, breaks = 1000000, col = "grey", xlim=c(0,100), ylim=c(0,100))
#performing DESeq2 on exp_100_sort
DESeq_run_exp_100 <-DESeq(exp_100)
plotDispEsts(DESeq_run_exp_100)
#performing DESeq2 on exp_60_sort
DESeq_run_exp_60 <-DESeq(exp_60)
plotDispEsts(DESeq_run_exp_60)
#normalising the counts exp_100
# normal_count_exp_100 <-counts(DESeq_run_exp_100, normalized=TRUE)
result_exp100 <- results(DESeq_run_exp_100)
result_exp100
#normalising the counts exp_100
normal_count_exp_100 <-counts(DESeq_run_exp_100, normalized=TRUE)
normal_count_exp_100
#normalising the counts exp_60
normal_count_exp_60 <-counts(DESeq_run_exp_60, normalized=TRUE)
normal_count_exp_60
#extracting the results from DESeq_run_exp_100
result_exp100 <- results(DESeq_run_exp_100)
result_exp100
#extracting the results from DESeq_run_exp_60
result_exp60 <- results(DESeq_run_exp_60)
result_exp60
write.csv( as.data.frame(result_exp100), file="result_exp100.csv")
write.csv( as.data.frame(result_exp60), file="result_exp60.csv")
#adding gene names
result_exp100$ensembl <- sapply( strsplit( rownames(result_exp100), split="\\+" ), "[", 1 )
library( "biomaRt" )
ensembl = useMart( "ensembl", dataset = "hsapiens_gene_ensembl" )
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = result_exp100$ensembl,
mart = ensembl )
idx <- match( result_exp100$ensembl, genemap$ensembl_gene_id )
ensembl = useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = result_exp100$ensembl,
mart = ensembl )
#adding gene names
BiocManager::install('grimbough/biomaRt')
library( "biomaRt" )
ensembl = useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = result_exp100$ensembl,
mart = ensembl )
# ensembl = useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
# genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_symbol"),
#                   filters = "ensembl_gene_id",
#                   values = result_exp100$ensembl,
#                   mart = ensembl )
# idx <- match( result_exp100$ensembl, genemap$ensembl_gene_id )
# result_exp100$entrez <- genemap$entrezgene[ idx ]
# result_exp100$hgnc_symbol <- genemap$hgnc_symbol[ idx ]
# head(result,4)
# write.csv( as.data.frame(result), file="results_all_dds_expressed_GeneName.csv")
listEnsemblArchives()
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
aresult_exp100$ensembl <- sapply( strsplit( rownames(result_exp100), split="\\+" ), "[", 1 )
result_exp100$ensembl <- sapply( strsplit( rownames(result_exp100), split="\\+" ), "[", 1 )
genemap <- getBM( attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = result_exp100$ensembl,
mart = ensembl )
symRes<-getSym(object=result_exp100, #The object with rownames to convert
obType="result_exp100", #The type of object 'res' or 'counts'
species="hsapiens", #species
target="HGNC", #What you want the gene names converted to. 'HGNC' is human gene symbols, 'MGI' for mouse symbols
addCol=F) #Boolean, FALSE replaces rownames with gene symbols (if there are duplicates, only the highest expressed version is kept), TRUE adds a column named SYMBOL and all duplicates are kept
library(BinfTools)
symRes<-getSym(object=result_exp100, #The object with rownames to convert
obType="result_exp100", #The type of object 'res' or 'counts'
species="hsapiens", #species
target="HGNC", #What you want the gene names converted to. 'HGNC' is human gene symbols, 'MGI' for mouse symbols
addCol=F) #Boolean, FALSE replaces rownames with gene symbols (if there are duplicates, only the highest expressed version is kept), TRUE adds a column named SYMBOL and all duplicates are kept
symCounts<-getSym(object=normal_count_exp_100,
obType="normal_count_exp_100",
species="hsapiens",
target="HGNC",
addCol=F)
View(result_exp100)
head(result_exp100, 10)
head(normal_count_exp_100, 10)
devtools::install_github("kevincjnixon/gpGeneSets") # gprofiler genesets for mouse, human, and drosophila
devtools::install_github("kevincjnixon/gpGeneSets", force = TRUE) # gprofiler genesets for mouse, human, and drosophila
library(gpGeneSets)
symRes<-getSym(object=result_exp100, #The object with rownames to convert
obType="result_exp100", #The type of object 'res' or 'counts'
species="hsapiens", #species
target="HGNC", #What you want the gene names converted to. 'HGNC' is human gene symbols, 'MGI' for mouse symbols
addCol=F) #Boolean, FALSE replaces rownames with gene symbols (if there are duplicates, only the highest expressed version is kept), TRUE adds a column named SYMBOL and all duplicates are kept
symCounts<-getSym(object=normal_count_exp_100,
obType="normal_count_exp_100",
species="hsapiens",
target="HGNC",
addCol=F)
head(normal_count_exp_100, 10)
View(normal_count_exp_100)
symRes<-getSym(object=result_exp100, #The object with rownames to convert
obType="res", #The type of object 'res' or 'counts'
species="hsapiens", #species
target="HGNC", #What you want the gene names converted to. 'HGNC' is human gene symbols, 'MGI' for mouse symbols
addCol=F) #Boolean, FALSE replaces rownames with gene symbols (if there are duplicates, only the highest expressed version is kept), TRUE adds a column named SYMBOL and all duplicates are kept
symCounts<-getSym(object=normal_count_exp_100,
obType="counts",
species="hsapiens",
target="HGNC",
addCol=F)
View(normal_count_exp_100)
head(result_exp100, 10)
df = subset(result_exp100, select = -c(ensembl) )
head(result_exp100, 10)
#extracting the results from DESeq_run_exp_100
result_exp100 <- results(DESeq_run_exp_100)
result_exp100
write.csv( as.data.frame(result_exp100), file="result_exp100.csv")
BiocManager::install("SAGx")
BiocManager::install("GSVA")
BiocManager::install("fgsea")
BiocManager::install("gage")
devtools::install_github("kevincjnixon/gpGeneSets")
devtools::install_github("kevincjnixon/BinfTools")
library(BinfTools)
library(GSVA)
library(SAGx)
library(fgsea)
library(gage)
library(gpGeneSets)
BiocManager::install("gage")
library(gage)
sym_result_exp100 <- result_exp100
symRes<-getSym(object=sym_result_exp100,
obType="res",
species="hsapiens"
target="FLYBASENAME_GENE",
addCol=F)
sym_result_exp100 <- getSym(object=sym_result_exp100,
obType="res",
species="hsapiens"
target="FLYBASENAME_GENE",
addCol=FALSE)
sym_result_exp100 <- getSym(object=sym_result_exp100,
obType="res",
species="hsapiens"
target="Gene_Name",
addCol=T)
library(gprofiler2)
sym_result_exp100 <- getSym(object=sym_result_exp100,
obType="res",
species="hsapiens",
target="Gene_Name",
addCol=F)
head(sym_result_exp100)
View(sym_result_exp100)
View(result_exp100)
View(normal_count_exp_100)
sym_result_exp100 <- result_exp100
sym_result_exp100 <- getSym(object=sym_result_exp100,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
head(sym_result_exp100)
View(count_data_clean)
# getting HGNC Names from ENSG names for result_exp60
sym_result_exp60 <- result_exp60
sym_result_exp60 <- getSym(object=sym_result_exp60,
obType="res",
species="hsapiens",
target="HGNC",
addCol=F)
head(sym_result_exp60)
rm(df)
rm(ensembl)
rm(symCounts)
rm(symRes)
#
#
#
#
#
#
chol_biosyn_genes<-c("ACAT2", "ARV1", "CYP51A1", "DHCR24", "DHCR7", "EBP", "FDFT1", "FDPS", "GGPS1", "HMGCR", "HMGCS1", "HSD17B7", "IDI1", "IDI2", "LBR", "LSS", "MSMO1", "MVD", "MVK", "NSDHL", "PLPP6", "PMVK", "SC5D", "SQLE", "TM7SF2")
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions=cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
library(BinfTools)
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions=cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
devtools::install_github("kevincjnixon/BinfTools")
BiocManager::install("qusage")
devtools::install_github("kevincjnixon/BinfTools")
library(BinfTools)
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions=cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions=cond,
title="lCholesterol biosynthesis genes")
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions=cond,
title="lCholesterol biosynthesis genes",
norm=NULL, #Set this to a character of the control condition to plot the relative expression (i.e. set this condition to a value of 1)
eb="sd", #Error bars, 'sd' = standard devation, 'se' = standard error, a value of zero (0; no quotes) will remove error bars altogether - this may be useful if plotting relative expression
returnDat=F, #Return the values if you want to plot this elsewhere (graphpad/excel) to match figures made by researchers
col="Dark2", #Colour scheme, can be RColourBrewer palette name, or vector of colours in rgb(), hexadecimal, or colour names
ord=c("WT","KO")) #If the order of the conditions in the plot is not what you wanted, you can set this to reorder the conditions in any way you want
barplot(chol_biosyn_genes)
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
#
#
#
#
#
#
cond<-as.character(DESeq_run_exp_100$condition)
chol_biosyn_genes<-c("ACAT2", "ARV1", "CYP51A1", "DHCR24", "DHCR7", "EBP", "FDFT1", "FDPS", "GGPS1", "HMGCR", "HMGCS1", "HSD17B7", "IDI1", "IDI2", "LBR", "LSS", "MSMO1", "MVD", "MVK", "NSDHL", "PLPP6", "PMVK", "SC5D", "SQLE", "TM7SF2")
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions = cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions = cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
rlang::last_error()
genes<-c("ACAT2", "ARV1", "CYP51A1", "DHCR24", "DHCR7", "EBP", "FDFT1", "FDPS", "GGPS1", "HMGCR", "HMGCS1", "HSD17B7", "IDI1", "IDI2", "LBR", "LSS", "MSMO1", "MVD", "MVK", "NSDHL", "PLPP6", "PMVK", "SC5D", "SQLE", "TM7SF2")
barGene(genes=chol_biosyn_genes,
counts=sym_result_exp100,
conditions = cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
genes<-c("ACAT2", "ARV1", "CYP51A1", "DHCR24", "DHCR7", "EBP", "FDFT1", "FDPS", "GGPS1", "HMGCR", "HMGCS1", "HSD17B7", "IDI1", "IDI2", "LBR", "LSS", "MSMO1", "MVD", "MVK", "NSDHL", "PLPP6", "PMVK", "SC5D", "SQLE", "TM7SF2")
barGene(genes=genes,
counts=sym_result_exp100,
conditions = cond,
title="lCholesterol biosynthesis genes",
norm=NULL,
eb="se",
col="Dark2",
ord=NULL)
plotCounts(DESeq_run_exp_100, gene=chol_biosyn_genes, intgroup="condition")
chol_biosyn_genes_dataframe <- sym_result_exp100[sym_result_exp100$INDIVIDUAL %in% chol_biosyn_genes ]
View(chol_biosyn_genes_dataframe)
rm(chol_biosyn_genes_dataframe)
View(sym_result_exp100)
out <- dd %>% dplyr::filter(INDIVIDUAL %in% chol_biosyn_genes)
out <- dd %=% dplyr::filter(INDIVIDUAL %in% chol_biosyn_genes)
chol_biosyn_genes_dataframe <- subset(sym_result_exp100, rownames(sym_result_exp100) == chol_biosyn_genes)
chol_biosyn_genes_dataframe <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% chol_biosyn_genes)
View(chol_biosyn_genes_dataframe)
chol_biosyn_genes_dataframe <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% chol_biosyn_genes)
rm(genes)
rm(cond)
View(chol_biosyn_genes_dataframe)
plotDispEsts(DESeq_run_exp_100)
Gene_set_KEGG_endocytosis <- read.csv('Gene_set_KEGG_endocytosis.csv')
exp100_Gene_set_KEGG_endocytosis <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% Gene_set_KEGG_endocytosis)
View(Gene_set_KEGG_endocytosis)
Gene_set_KEGG_endocytosis <- read.csv('Gene_set_KEGG_endocytosis.csv', header = FALSE)
exp100_Gene_set_KEGG_endocytosis <- sym_result_exp100[rownames(counts(sym_result_exp100)) %in% names(Gene_set_KEGG_endocytosis),]
View(sym_result_exp100)
summary(sym_result_exp100)
Gene_set_KEGG_endocytosis <-c(Gene_set_KEGG_endocytosis)
View(Gene_set_KEGG_endocytosis)
exp100_Gene_set_KEGG_endocytosis <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% Gene_set_KEGG_endocytosis)
View(exp100_Gene_set_KEGG_endocytosis)
View(sym_result_exp100)
View(chol_biosyn_genes_dataframe)
Gene_set_KEGG_endocytosis <- read.csv('Gene_set_KEGG_endocytosis.csv', header = FALSE)
View(Gene_set_KEGG_endocytosis)
Gene_set_KEGG_endocytosis <-c(Gene_set_KEGG_endocytosis)
exp100_Gene_set_KEGG_endocytosis <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% Gene_set_KEGG_endocytosis)
Gene_set_KEGG_endocytosis <- read.csv('Gene_set_KEGG_endocytosis.csv', header = FALSE)$V1
Gene_set_KEGG_endocytosis <- read.csv('Gene_set_KEGG_endocytosis.csv', header = FALSE)$V1
exp100_Gene_set_KEGG_endocytosis <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% Gene_set_KEGG_endocytosis)
rm(chol_biosyn_genes_dataframe)
rm(chol_biosyn_genes)
#
#
#
#
#
#
Gene_set_chol_biosyn <- read.csv('Gene_set_cholesterol_biosynthesis.csv', header = FALSE)$V1
exp100_Gene_set_chol_biosyn <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% Gene_set_chol_biosyn)
Gene_set_chol_homeo <- read.csv('Gene_set_cholesterol_homeostasis.csv', header = FALSE)$V1
exp100_Gene_set_chol_homeo <- subset(sym_result_exp100, rownames(sym_result_exp100) %in% Gene_set_chol_homeo)
#gene sets exp100
exp60_Gene_set_chol_biosyn <- subset(sym_result_exp60, rownames(sym_result_exp60) %in% Gene_set_chol_biosyn)
exp60_Gene_set_chol_homeo <- subset(sym_result_exp60, rownames(sym_result_exp60) %in% Gene_set_chol_homeo)
exp60_Gene_set_KEGG_endocytosis <- subset(sym_result_exp60, rownames(sym_result_exp60) %in% Gene_set_KEGG_endocytosis)
barGene(genes=exp60_Gene_set_chol_biosyn,
counts=log10(1+symCounts),
conditions=cond,
title="log10 (1+normCounts)",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
barGene(genes=exp100_Gene_set_chol_biosyn,
counts=log10(1+sym_result_exp100),
conditions=cond,
title="log10 (1+normCounts)",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
devtools::install_github("kevincjnixon/BinfTools")
devtools::install_github("kevincjnixon/BinfTools", force = TRUE)
library(BinfTools)
barGene(genes=exp100_Gene_set_chol_biosyn,
counts=log10(1+sym_result_exp100),
conditions=cond,
title="log10 (1+normCounts)",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
barGene(genes=exp100_Gene_set_chol_biosyn,
counts=sym_result_exp100,
conditions=cond,
title="sym_result_exp100",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
barGene(genes=Gene_set_chol_biosyn,
counts=sym_result_exp100,
conditions=cond,
title="sym_result_exp100",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
rlang::last_error()
rlang::last_trace()
cond<-as.character(DESeq_run_exp_100$condition)
barGene(genes=Gene_set_chol_biosyn,
counts=sym_result_exp100,
conditions=cond,
title="sym_result_exp100",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
View(sample_data)
cond<-as.character(DESeq_run_exp_100$condition)
barGene(genes=Gene_set_chol_biosyn,
counts=sym_result_exp100,
conditions=cond,
title="sym_result_exp100",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
rlang::last_error()
rlang::last_trace()
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
}
packages = c('GGally', 'plotly', 'parcoords', 'tidyverse')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
}
View(exp100_Gene_set_chol_biosyn)
ggparcoord(data = exp60_Gene_set_chol_biosyn, columns = c(1:2))
ggparcoord(data = exp60_Gene_set_chol_biosyn)
ggparcoord(data = exp60_Gene_set_chol_biosyn, rows)
rm(packages)
install.packages("pheatmap")
library(pheatmap)
annot_col <- samples %>%
column_to_rownames('sample') %>%
select(condition) %>%
as.data.frame()
vdt_DESeq_run_exp_100 <- vst(DESeq_run_exp_100)
sample_dists <- assay(vdt_DESeq_run_exp_100) %>%
t() %>%
dist() %>%
as.matrix()
head(sample_dists)
mdsData <- data.frame(cmdscale(sample_dists))
mds <- cbind(mdsData, as.data.frame(colData(vsd))) # combine with sample data
mds <- cbind(mdsData, as.data.frame(colData(vdt_DESeq_run_exp_100))) # combine with sample data
head(mds)
ggplot(mds, aes(X1, X2, shape = condition)) +
geom_point(size = 3) +
theme_minimal()
pheatmap(assay(vdt_DESeq_run_exp_100)[exp100_Gene_set_chol_biosyn, ], cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=FALSE,)
vds <- vst(DESeq_run_exp_100)
pheatmap(assay(vds), cluster_rows=TRUE, show_rownames=TRUE,
cluster_cols=FALSE,)
dim(sym_result_exp100)
dim(cond)
cond<-as.character(DESeq_run_exp_100$condition)
dim(cond)
cond<-as.character(DESeq_run_exp_100$condition)
dim(sym_result_exp100)
View(sym_result_exp100)
dim(cond)
view(cond)
View(cond)
counts_exp100<-as.data.frame(counts(DESeq_run_exp_100, normalized=T))
View(counts_exp100)
barGene(genes=Gene_set_chol_biosyn,
counts=log10(1+counts_exp100),
conditions=cond,
title="sym_result_exp100",
norm="WT",
eb="se",
col=c("blue","yellow"),
ord=NULL)
